def sjf_scheduling(processes):
    current_time = 0
    completed_processes = []
    remaining_processes = sorted(processes, key=lambda x: x[0])

    while remaining_processes:
        eligible_processes = [p for p in remaining_processes if p[0] <= current_time]

        if not eligible_processes:
            current_time += 1
            continue

        shortest_process = min(eligible_processes, key=lambda x: x[1])
        remaining_processes.remove(shortest_process)

        arrival_time, burst_time = shortest_process
        completion_time = current_time + burst_time
        turnaround_time = completion_time - arrival_time
        waiting_time = turnaround_time - burst_time

        completed_processes.append([arrival_time, burst_time, completion_time, turnaround_time, waiting_time])
        current_time = completion_time

    return completed_processes

# Input processes at runtime
num_processes = int(input("Enter the number of processes: "))
processes = []

for _ in range(num_processes):
    arrival_time = int(input("Enter arrival time: "))
    burst_time = int(input("Enter burst time: "))
    processes.append([arrival_time, burst_time])

result = sjf_scheduling(processes)

# Display results
print("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time")
for i, process in enumerate(result):
    print(f"{i + 1}\t{process[0]}\t\t{process[1]}\t\t{process[2]}\t\t{process[3]}\t\t{process[4]}")

# Calculate and display averages
average_turnaround_time = sum(process[3] for process in result) / len(result)
average_waiting_time = sum(process[4] for process in result) / len(result)

print("\nAverage Turnaround Time:", average_turnaround_time)
print("Average Waiting Time:", average_waiting_time)

